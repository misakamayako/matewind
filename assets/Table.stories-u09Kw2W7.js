import{j as e}from"./jsx-runtime-CLpGMVip.js";function d(t){return e.jsxs("table",{className:"min-w-full bg-white border border-gray-200 rounded-lg shadow-md",children:[e.jsx("thead",{className:"bg-gray-200 text-gray-600 uppercase text-sm leading-normal",children:e.jsx("tr",{children:t.columns.map((r,s)=>e.jsx("th",{className:"py-3 px-6 text-left",style:{width:r.width},children:r.title},s))})}),e.jsx("tbody",{className:"text-gray-600 text-sm font-light",children:t.dataSource.map((r,s)=>e.jsx("tr",{className:"border-b border-gray-200 hover:bg-gray-100",children:t.columns.map((l,y)=>e.jsx("td",{className:"py-3 px-6 text-left whitespace-nowrap",children:l.props?r[l.props]:l.renderCell?l.renderCell(r,s):null},`${s}-${y}`))},s))})]})}d.__docgenInfo={description:"",methods:[],displayName:"Table",props:{dataSource:{required:!0,tsType:{name:"Array",elements:[{name:"T"}],raw:"T[]"},description:""},columns:{required:!0,tsType:{name:"Array",elements:[{name:"ColumnConfig",elements:[{name:"T"}],raw:"ColumnConfig<T>"}],raw:"ColumnConfig<T>[]"},description:""},strip:{required:!1,tsType:{name:"boolean"},description:""}}};const w={component:d},i=[{id:1,name:"John Doe",age:28,address:"123 Main St"},{id:2,name:"Jane Smith",age:34,address:"456 Elm St"},{id:3,name:"Alice Johnson",age:45,address:"789 Oak St"}],c=[{title:"ID",props:"id",width:"50px"},{title:"Name",props:"name",width:"150px"},{title:"Age",props:"age",width:"80px"},{title:"Address",props:"address"}],a=()=>e.jsx(d,{columns:c,dataSource:i}),o=()=>{const t=[...c,{title:"Actions",renderCell:r=>e.jsx("button",{className:"text-blue-500 hover:underline",onClick:()=>alert(`Edit row: ${r.id}`),children:"Edit"}),width:"100px"}];return e.jsx(d,{columns:t,dataSource:i})},n=()=>e.jsx(d,{strip:!0,columns:c,dataSource:i});a.__docgenInfo={description:"",methods:[],displayName:"BasicTable"};o.__docgenInfo={description:"",methods:[],displayName:"TableWithCustomRender"};n.__docgenInfo={description:"",methods:[],displayName:"StripedTable"};var m,u,p;a.parameters={...a.parameters,docs:{...(m=a.parameters)==null?void 0:m.docs,source:{originalSource:"() => <Table columns={columns} dataSource={dataSource} />",...(p=(u=a.parameters)==null?void 0:u.docs)==null?void 0:p.source}}};var h,b,x;o.parameters={...o.parameters,docs:{...(h=o.parameters)==null?void 0:h.docs,source:{originalSource:`() => {
  const customColumns: ColumnConfig<RowData>[] = [...columns, {
    title: "Actions",
    renderCell: row => <button className="text-blue-500 hover:underline" onClick={() => alert(\`Edit row: \${row.id}\`)}>
            Edit
                </button>,
    width: "100px"
  }];
  return <Table columns={customColumns} dataSource={dataSource} />;
}`,...(x=(b=o.parameters)==null?void 0:b.docs)==null?void 0:x.source}}};var g,T,C;n.parameters={...n.parameters,docs:{...(g=n.parameters)==null?void 0:g.docs,source:{originalSource:"() => <Table strip columns={columns} dataSource={dataSource} />",...(C=(T=n.parameters)==null?void 0:T.docs)==null?void 0:C.source}}};const f=["BasicTable","TableWithCustomRender","StripedTable"];export{a as BasicTable,n as StripedTable,o as TableWithCustomRender,f as __namedExportsOrder,w as default};
